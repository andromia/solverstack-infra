# coding: utf-8

from __future__ import absolute_import

import re  # noqa: F401,E501
from datetime import date, datetime  # noqa: F401
from typing import Dict, List  # noqa: F401

from app import util
from app.api.models.base_model_ import Model
from app.api.models.origin import Origin  # noqa: F401,E501
from app.api.models.demand import Demand
from app.api.models.solution import Solution  # noqa: F401,E501
from app.api.models.unit import Unit  # noqa: F401,E501


class SolutionResponse(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(
        self,
        origin: Origin = None,
        demand: Demand = None,
        solution: List[Solution] = None,
        unit: Unit = None,
        vehicle_capacity: int = None,
    ):  # noqa: E501
        """SolutionResponse - a model defined in Swagger

        :param origin: The origin of this SolutionResponse.  # noqa: E501
        :type origin: Origin
        :param demand: The demand of this SolutionResponse.
        :type demand: Demand
        :param solution: The solution of this SolutionResponse.  # noqa: E501
        :type solution: List[Solution]
        :param unit: The unit of this SolutionResponse.  # noqa: E501
        :type unit: Unit
        :param vehicle_capacity: The vehicle_capacity of this SolutionResponse.  # noqa: E501
        :type vehicle_capacity: int
        """
        self.swagger_types = {
            "origin": Origin,
            "demand": Demand,
            "solution": List[Solution],
            "unit": Unit,
            "vehicle_capacity": int,
        }

        self.attribute_map = {
            "origin": "origin",
            "demand": "demand",
            "solution": "solution",
            "unit": "unit",
            "vehicle_capacity": "vehicle_capacity",
        }
        self._origin = origin
        self._demand = demand
        self._solution = solution
        self._unit = unit
        self._vehicle_capacity = vehicle_capacity

    @classmethod
    def from_dict(cls, dikt) -> "SolutionResponse":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The solutionResponse of this SolutionResponse.  # noqa: E501
        :rtype: SolutionResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def origin(self) -> Origin:
        """Gets the origin of this SolutionResponse.


        :return: The origin of this SolutionResponse.
        :rtype: Origin
        """
        return self._origin

    @origin.setter
    def origin(self, origin: Origin):
        """Sets the origin of this SolutionResponse.


        :param origin: The origin of this SolutionResponse.
        :type origin: Origin
        """
        if origin is None:
            raise ValueError(
                "Invalid value for `origin`, must not be `None`"
            )  # noqa: E501

        self._origin = origin

    @property
    def demand(self) -> Demand:
        """Gets the demand of this SolutionResponse.


        :return: The demand of this SolutionResponse.
        :rtype: Demand
        """
        return self._demand

    @demand.setter
    def demand(self, demand: Demand):
        """Sets the demand of this SolutionResponse.


        :param demand: The demand of this SolutionResponse.
        :type demand: Demand
        """
        if demand is None:
            raise ValueError("Invalid value for `demand`, must not be `None`")

        self._demand = demand

    @property
    def solution(self) -> List[Solution]:
        """Gets the solution of this SolutionResponse.


        :return: The solution of this SolutionResponse.
        :rtype: List[Solution]
        """
        return self._solution

    @solution.setter
    def solution(self, solution: List[Solution]):
        """Sets the solution of this SolutionResponse.


        :param solution: The solution of this SolutionResponse.
        :type solution: List[Solution]
        """
        if solution is None:
            raise ValueError(
                "Invalid value for `solution`, must not be `None`"
            )  # noqa: E501

        self._solution = solution

    @property
    def unit(self) -> Unit:
        """Gets the unit of this SolutionResponse.


        :return: The unit of this SolutionResponse.
        :rtype: Unit
        """
        return self._unit

    @unit.setter
    def unit(self, unit: Unit):
        """Sets the unit of this SolutionResponse.


        :param unit: The unit of this SolutionResponse.
        :type unit: Unit
        """
        if unit is None:
            raise ValueError(
                "Invalid value for `unit`, must not be `None`"
            )  # noqa: E501

        self._unit = unit

    @property
    def vehicle_capacity(self) -> int:
        """Gets the vehicle_capacity of this SolutionResponse.


        :return: The vehicle_capacity of this SolutionResponse.
        :rtype: int
        """
        return self._vehicle_capacity

    @vehicle_capacity.setter
    def vehicle_capacity(self, vehicle_capacity: int):
        """Sets the vehicle_capacity of this SolutionResponse.


        :param vehicle_capacity: The vehicle_capacity of this SolutionResponse.
        :type vehicle_capacity: int
        """
        if vehicle_capacity is None:
            raise ValueError(
                "Invalid value for `vehicle_capacity`, must not be `None`"
            )  # noqa: E501

        self._vehicle_capacity = vehicle_capacity
